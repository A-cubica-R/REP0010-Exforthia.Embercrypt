/*
 * Created on 2025-09-29 ( 11:35:56 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 4.1.0
 */
package exforthia.embercrypt.rest.controllers;

import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import exforthia.embercrypt.rest.dto.VaultOtpDTO;
import exforthia.embercrypt.rest.services.VaultOtpService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

@RestController
@RequestMapping(
	value = "/vaultotp", 
	produces = MediaType.APPLICATION_JSON_VALUE)
@Tag(
	name = "Vault OTP", 
	description = "API para gesti√≥n de tokens OTP del vault")
public class VaultOtpRestController {

	private static final Logger logger = LoggerFactory.getLogger(VaultOtpRestController.class);
	
	@Autowired
	private VaultOtpService service ; // injected
    
	/**
	 * Get ALL
	 *
	 * @return
	 */
	@GetMapping("")
	@Operation(summary = "Get all VaultOTP entries", description = "Returns a list of all VaultOTP entries")
	@ApiResponse(responseCode = "200", description = "Lista de OTPs obtenida exitosamente", 
		content = @Content(mediaType = "application/json", schema = @Schema(implementation = VaultOtpDTO.class)))
	public ResponseEntity<List<VaultOtpDTO>> findAll() {
    	logger.debug("REST : GET - findAll");
    	List<VaultOtpDTO> list = service.findAll();
    	return ResponseEntity.ok(list); // always 200
    }
    
    /**
     * Get ONE identified by the given PK
	 *
	 * @param idOtp
     * @return 200 or 404 
     */
    @GetMapping("/{idOtp}")
    public ResponseEntity<VaultOtpDTO> findById(@PathVariable long idOtp) {
    	logger.debug("REST : GET - findById");
    	VaultOtpDTO vaultOtpDTO = service.findById(idOtp);
		if ( vaultOtpDTO != null ) {
			return ResponseEntity.ok(vaultOtpDTO); // 200 OK, found
		}
		else {
			return ResponseEntity.notFound().build(); // 404 Not found
		}		
    }

    
	/**
 	 * Create if doesn't exist 
	 *
	 * @param vaultOtpDTO
	 * @return 201 created or 409 conflict
	 */
	@PostMapping("")
	public ResponseEntity<Void> create(@RequestBody VaultOtpDTO vaultOtpDTO) {
    	logger.debug("REST : POST - create");
		if ( service.create(vaultOtpDTO) ) {
			return ResponseEntity.status(HttpStatus.CREATED).build(); // 201 created
		}
		else {
			return ResponseEntity.status(HttpStatus.CONFLICT).build(); // 409 Conflict
		}
	}

	/**
	 * Update or create
	 *
	 * @param idOtp
	 * @param vaultOtpDTO
	 * @return 200 updated or created
	 */
	@PutMapping("/{idOtp}")
	public ResponseEntity<Void> save(@PathVariable long idOtp, @RequestBody VaultOtpDTO vaultOtpDTO) {
    	logger.debug("REST : PUT - save");
		service.save(idOtp, vaultOtpDTO);
		return ResponseEntity.ok().build(); // OK, updated or created
	}

	/**
 	 * Update if exists 
	 *
	 * @param vaultOtpDTO
	 * @return 200 updated or 404 not found
	 */
	@PutMapping("")
	public ResponseEntity<Void> update(@RequestBody VaultOtpDTO vaultOtpDTO) {
    	logger.debug("REST : PUT - update");
		if ( service.update(vaultOtpDTO) ) {
			return ResponseEntity.ok().build(); // 200 OK, found and updated
		}
		else {
			return ResponseEntity.notFound().build(); // 404 Not found = "not updated"
		}
	}

	/**
 	 * Partial update for the given PK (if it exists )
	 *
	 * @param idOtp
	 * @param vaultOtpDTO
	 * @return 200 updated or 404 not found
	 */
	@PatchMapping("/{idOtp}")
	public ResponseEntity<Void> partialUpdate(@PathVariable long idOtp, @RequestBody VaultOtpDTO vaultOtpDTO) {
    	logger.debug("REST : PATCH - partialUpdate");
    	if ( service.partialUpdate(idOtp, vaultOtpDTO) ) {
    		return ResponseEntity.ok().build(); // OK, found and updated
    	}
    	else {
			return ResponseEntity.notFound().build(); // 404 Not found = "not updated"
    	}
	}

	/**
	 * Delete by PK 
	 *
	 * @param idOtp
	 * @return 204 deleted or 404 not found
	 */
	@DeleteMapping("/{idOtp}")
	public ResponseEntity<Void> deleteById(@PathVariable long idOtp) {
    	logger.debug("REST : DELETE - deleteById");
		if ( service.deleteById(idOtp) ) {
			return ResponseEntity.noContent().build(); // 204 No content = "deleted"
		}
		else {
			return ResponseEntity.notFound().build(); // 404 Not found = "not deleted"
		}
	}

}
