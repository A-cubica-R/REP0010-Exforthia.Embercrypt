/*
 * Created on 2025-10-14 ( 08:56:32 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 4.2.0
 */
package exforthia.embercrypt.rest.services;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;

import exforthia.embercrypt.persistence.entities.VaultOtp;
import exforthia.embercrypt.persistence.repositories.VaultOtpRepository;
import exforthia.embercrypt.rest.dto.holder.VaultOtpHolder;
import exforthia.embercrypt.rest.dto.sender.VaultOtpSender;
import exforthia.embercrypt.rest.services.commons.GenericService;
import exforthia.embercrypt.funct.mappers.VaultOtpMappr;

/**
 * REST service for entity "VaultOtp" <br>
 * 
 * This service provides all the necessary operations required by the REST controller <br>
 * 
 * @author Telosys
 *
 */
@Service
public class VaultOtpService extends GenericService<VaultOtp, VaultOtpHolder, VaultOtpSender> {

	private static final Logger logger = LoggerFactory.getLogger(VaultOtpService.class);

	@Autowired
	private VaultOtpRepository repository;

	@Autowired
	private VaultOtpMappr mapper;
	
	/**
	 * Converts a collection of JPA ENTITIES to a collection of Holders
	 * 
	 * @param entities
	 * @return
	 */
	@Override
	protected List<VaultOtpHolder> entityListToHolderList(Iterable<VaultOtp> entities) {
		List<VaultOtpHolder> holderList = new ArrayList<>();
		if (entities != null) {
			for (VaultOtp entity : entities) {
				holderList.add(mapper.entityToHolder(entity));
			}
		}
		return holderList;
	}
	private Long getEntityIdFromHolder(VaultOtpHolder holder) {
		return holder.getIdOtp();
	}

	/**
	 * Finds all occurrences of the entity
	 *
	 * @return
	 */
	public List<VaultOtpHolder> findAll() {
		logger.debug("findAll()");
		Iterable<VaultOtp> all = repository.findAll();
		return entityListToHolderList(all);
	}

	/**
	 * Finds the entity identified by the given PK
	 *
	 * @param idOtp 
	 * @return the entity or null if not found
	 */
	public VaultOtpHolder findById(long idOtp) {
		Long entityId = idOtp;
		logger.debug("findById({})", entityId);
		Optional<VaultOtp> optionalEntity = repository.findById(entityId);
		return optionalEntity.map(mapper::entityToHolder).orElse(null);
	}

	/**
	 * Saves the given entity with the given PK <br>
	 * "UPSERT" operation (updated if it exists or created if it does not exist)
	 *
	 * @param idOtp 
	 * @param sender 
	 */
	public void save(long idOtp, VaultOtpSender sender) {
		Long entityId = idOtp;
		logger.debug("save({},{})", entityId, sender);
		// Convert sender to entity and save
		VaultOtp entity = mapper.senderToEntity(sender);
		// force PK in entity (just to be sure to conform with the given PK) 
		entity.setIdOtp(idOtp);
		repository.save(entity);
	}

	/**
	 * Updates the given entity if it exists
	 *
	 * @param holder
	 * @return true if updated, false if not found
	 */
	public boolean update(VaultOtpHolder holder) {
		logger.debug("update({})", holder);
		if (repository.existsById(getEntityIdFromHolder(holder))) {
			// For full update, we can map directly from holder to entity
			VaultOtp entity = mapper.holderToEntity(holder);
			repository.save(entity);
			return true; // found and updated
		} else {
			return false; // not found (not updated)
		}
	}

	/**
	 * Updates partially the given entity if it exists
	 *
	 * @param idOtp 
	 * @param sender
	 * @return true if updated, false if not found
	 */
	public boolean partialUpdate(long idOtp, VaultOtpSender sender) {
		Long entityId = idOtp;
		logger.debug("partialUpdate({}, {})", entityId, sender);
		Optional<VaultOtp> optionalEntity = repository.findById(entityId);
		if (optionalEntity.isPresent()) {
			VaultOtp entity = optionalEntity.get();
			// Update entity with sender data (only non-null fields from sender)
			mapper.senderToEntity(sender, entity);
			repository.save(entity);
			return true; // found and updated
		} else {
			return false; // not found (not updated)
		}
	}

	/**
	 * Creates the given entity
	 *
	 * @param sender
	 * @return true if created, false if already exists
	 */
	public boolean create(VaultOtpSender sender) {
		logger.debug("create({})", sender);
		// auto-generated Primary Key
		sender.setCreatedAt(LocalDateTime.now());
		VaultOtp entity = mapper.senderToEntity(sender);
		repository.save(entity);
		return true; // always created
	}

	/**
	 * Deletes an entity by its PK
	 *
	 * @param idOtp 
	 * @return true if deleted, false if not found
	 */
	public boolean deleteById(long idOtp) {
		Long entityId = idOtp;
		logger.debug("deleteById({})", entityId);
		if (repository.existsById(entityId)) {
			repository.deleteById(entityId);
			return true; // find and deleted
		} else {
			return false; // not found (not deleted)
		}
	}

	// -----------------------------------------------------------------------------------------
	// Specific "finders"
	// -----------------------------------------------------------------------------------------
/***
	public List<VaultOtpHolder> findByTitle(String title) {
		logger.debug("findByTitle({})", title);
		// List<VaultOtp> list = repository.findByTitle(title);
		List<VaultOtp> list = repository.findByTitleContaining(title);
		return entityListToHolderList(list);
	}

	public List<VaultOtpHolder> findByPrice(BigDecimal price) {
		logger.debug("findByPrice({})", price);
		// List<VaultOtp> list = repository.findByTitle(title);
		List<VaultOtp> list = repository.findByPrice(price);
		return entityListToHolderList(list);
	}

	public List<VaultOtpHolder> findByTitleAndPrice(String title, BigDecimal price) {
		logger.debug("findByTitleAndPrice({}, {})", title, price);
		List<VaultOtp> list = repository.findByTitleContainingAndPrice(title, price);
		return entityListToHolderList(list);
	}
***/
}
