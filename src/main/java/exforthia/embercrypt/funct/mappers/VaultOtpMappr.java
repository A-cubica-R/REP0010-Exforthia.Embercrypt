/*
 * Created on 2025-10-14 ( 08:56:31 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 4.2.0
 */
package exforthia.embercrypt.funct.mappers;

import org.mapstruct.Mapper;
import org.mapstruct.MappingTarget;
import org.mapstruct.Mappings;
import org.mapstruct.Mapping;
import org.mapstruct.NullValuePropertyMappingStrategy;

import exforthia.embercrypt.persistence.entities.VaultOtp;
import exforthia.embercrypt.rest.dto.holder.VaultOtpHolder;
import exforthia.embercrypt.rest.dto.sender.VaultOtpSender;

/**
 * MapStruct mapper for "VaultOtp" entity
 * 
 * This mapper handles conversions between Entity, Holder, and Sender
 * MapStruct generates the implementation automatically at compile time
 * 
 * @author Telosys
 */
@Mapper(componentModel = "spring", nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
public interface VaultOtpMappr {

    /**
     * Converts Entity to Holder (for GET responses)
     * 
     * @param entity the JPA entity
     * @return the holder with all data
     */
    VaultOtpHolder entityToHolder(VaultOtp entity);

    /**
     * Converts Sender to Entity (for POST/PUT requests)
     * 
     * @param sender the sender with user input data
     * @return the JPA entity
     */
    @Mappings({
        @Mapping(target = "idOtp", ignore = true)
    })
    VaultOtp senderToEntity(VaultOtpSender sender);

    /**
     * Converts Sender to Entity (for PATCH requests)
     * 
     * @param sender the sender with partial data
     * @param entity the existing entity to update
     */
    @Mappings({
        @Mapping(target = "idOtp", ignore = true)
    })
    void senderToEntity(VaultOtpSender sender, @MappingTarget VaultOtp entity);

    /**
     * Converts Holder to Entity (for full updates)
     * 
     * @param holder the holder with complete data
     * @return the JPA entity
     */
    VaultOtp holderToEntity(VaultOtpHolder holder);
}